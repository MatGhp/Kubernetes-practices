# Stable Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-stable
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
      track: stable
  template:
    metadata:
      labels:
        app: myapp
        track: stable
    spec:
      containers:
      - name: myapp
        image: nginx:1.21
        ports:
        - containerPort: 80
---
# Canary Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-canary
spec:
  replicas: 1 # set the replicas to 1, so that 25% of the trafic routes to this canary deployment (75% goes to stable)
  selector:
    matchLabels:
      app: myapp
      track: canary
  template:
    metadata:
      labels:
        app: myapp
        track: canary
    spec:
      containers:
      - name: myapp
        image: nginx:1.22
        ports:
        - containerPort: 80
---
# Service to route traffic to both stable and canary
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  selector:
    app: myapp
  ports:
  - port: 80
    targetPort: 80

# ---
# Sample commands for canary deployment management:
#
# Apply the deployments and service:
# kubectl apply -f 05-canary-deployment.yaml
#
# Check which pods are running:
# kubectl get pods -l app=myapp
#
# To increase or decrease canary traffic, scale the canary deployment:
# kubectl scale deployment --replicas=2 myapp-canary
#
# To remove the canary, scale down or delete the canary deployment:
# kubectl scale deployment --replicas=0 myapp-canary
# kubectl delete deployment myapp-canary
#
# Clean up:
# kubectl delete -f 05-canary-deployment.yaml
